// services/grammarService.js
import { grammarAdminAPI } from '../api/modules/grammar.api';
import toast from 'react-hot-toast';

// ==================== TOPIC SERVICES ====================
export const topicService = {
  /**
   * ‚úÖ NEW: L·∫•y topics v·ªõi ph√¢n trang
   */
  async fetchPaginated(params = {}) {
    try {
      const response = await grammarAdminAPI.getAllTopics(params);
      return response.data.data; // Return full paginated data
    } catch (error) {
      toast.error('L·ªói khi l·∫•y danh s√°ch topic: ' + (error.response?.data?.message || 'Vui l√≤ng th·ª≠ l·∫°i.'));
      throw error;
    }
  },

  /**
   * ‚úÖ FIXED: L·∫•y T·∫§T C·∫¢ topics (kh√¥ng ph√¢n trang) - for getting max orderIndex
   */
  async fetchAll() {
    try {
      const response = await grammarAdminAPI.getAllTopics({ 
        page: 0, 
        size: 1000,  // L·∫•y max 1000 records
        sort: 'orderIndex,desc' // ‚úÖ Sort desc ƒë·ªÉ l·∫•y max order ngay
      });
      
      // Handle both paginated and non-paginated response
      if (response.data.data.content) {
        return response.data.data.content;
      }
      return response.data.data || [];
    } catch (error) {
      toast.error('L·ªói khi l·∫•y danh s√°ch topic: ' + (error.response?.data?.message || 'Vui l√≤ng th·ª≠ l·∫°i.'));
      throw error;
    }
  },

  /**
   * ‚úÖ NEW: L·∫•y orderIndex ti·∫øp theo (t·ªëi ∆∞u h∆°n)
   */
  async getNextOrderIndex() {
    try {
      console.log('üîç Fetching next order index for topics...');
      
      const response = await grammarAdminAPI.getNextTopicOrderIndex();
      const nextOrder = response.data.data.nextOrderIndex;
      
      console.log('‚úÖ Next topic orderIndex:', nextOrder);
      return nextOrder;
    } catch (error) {
      console.error('‚ùå Get next order index error:', error);
      return 1;
    }
  },

  /**
   * T·∫°o topic m·ªõi
   */
  async create(topicData) {
    try {
      const response = await grammarAdminAPI.createTopic(topicData);
      toast.success('T·∫°o topic th√†nh c√¥ng!');
      return response.data.data;
    } catch (error) {
      toast.error('L·ªói khi t·∫°o topic: ' + (error.response?.data?.message || 'Vui l√≤ng th·ª≠ l·∫°i.'));
      throw error;
    }
  },

  /**
   * C·∫≠p nh·∫≠t topic
   */
  async update(id, topicData) {
    try {
      const response = await grammarAdminAPI.updateTopic(id, topicData);
      toast.success('C·∫≠p nh·∫≠t topic th√†nh c√¥ng!');
      return response.data.data;
    } catch (error) {
      toast.error('L·ªói khi c·∫≠p nh·∫≠t topic: ' + (error.response?.data?.message || 'Vui l√≤ng th·ª≠ l·∫°i.'));
      throw error;
    }
  },

  /**
   * X√≥a topic
   */
  async delete(id) {
    try {
      await grammarAdminAPI.deleteTopic(id);
      toast.success('X√≥a topic th√†nh c√¥ng!');
    } catch (error) {
      toast.error('L·ªói khi x√≥a topic: ' + (error.response?.data?.message || 'Vui l√≤ng th·ª≠ l·∫°i.'));
      throw error;
    }
  },
};

// ==================== LESSON SERVICES ====================
export const lessonService = {
  /**
   * L·∫•y lessons v·ªõi ph√¢n trang
   */
  async fetchPaginatedByTopic(topicId, params = {}) {
    try {
      const response = await grammarAdminAPI.getLessonsByTopic(topicId, params);
      return response.data.data;
    } catch (error) {
      console.error('Fetch paginated lessons error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi l·∫•y danh s√°ch b√†i h·ªçc');
    }
  },

  /**
   * L·∫•y T·∫§T C·∫¢ lessons theo topic (kh√¥ng ph√¢n trang)
   */
  async fetchByTopic(topicId) {
    try {
      const response = await grammarAdminAPI.getLessonsByTopic(topicId, { 
        page: 0, 
        size: 1000,
        sort: 'orderIndex,desc' // ‚úÖ Sort desc
      });
      
      if (response.data.data.content) {
        return response.data.data.content;
      }
      return response.data.data || [];
    } catch (error) {
      console.error('Fetch lessons by topic error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi l·∫•y danh s√°ch b√†i h·ªçc');
    }
  },

  /**
   * L·∫•y orderIndex ti·∫øp theo cho lesson
   */
  async getNextOrderIndex(topicId) {
    try {
      console.log(`üîç Fetching next order index for lessons in topic ${topicId}...`);
      
      const response = await grammarAdminAPI.getNextLessonOrderIndex(topicId);
      const nextOrder = response.data.data.nextOrderIndex;
      
      console.log('‚úÖ Next lesson orderIndex:', nextOrder);
      return nextOrder;
    } catch (error) {
      console.error('‚ùå Get next order index error:', error);
      return 1;
    }
  },

  /**
   * L·∫•y lesson theo ID
   */
  async fetchById(lessonId) {
    try {
      const response = await grammarAdminAPI.getLessonDetail(lessonId);
      return response.data.data;
    } catch (error) {
      console.error('Fetch lesson by ID error:', error);
      throw new Error('L·ªói khi l·∫•y th√¥ng tin b√†i h·ªçc');
    }
  },

  /**
   * T·∫°o lesson m·ªõi
   */
  async create(lessonData) {
    try {
      const response = await grammarAdminAPI.createLesson(lessonData);
      toast.success('T·∫°o b√†i h·ªçc th√†nh c√¥ng!');
      return response.data.data;
    } catch (error) {
      console.error('Create lesson error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi t·∫°o b√†i h·ªçc');
    }
  },

  /**
   * C·∫≠p nh·∫≠t lesson
   */
  async update(lessonId, lessonData) {
    try {
      const response = await grammarAdminAPI.updateLesson(lessonId, lessonData);
      toast.success('C·∫≠p nh·∫≠t b√†i h·ªçc th√†nh c√¥ng!');
      return response.data.data;
    } catch (error) {
      console.error('Update lesson error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi c·∫≠p nh·∫≠t b√†i h·ªçc');
    }
  },

  /**
   * X√≥a lesson
   */
  async delete(lessonId, params = {}) {
    try {
      await grammarAdminAPI.deleteLesson(lessonId, params); // params = { cascade: true } khi c·∫ßn x√≥a c·∫£ questions
      toast.success('X√≥a b√†i h·ªçc th√†nh c√¥ng!');
      return true;
    } catch (error) {
      console.error('Delete lesson error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi x√≥a b√†i h·ªçc');
    }
  },
};

// ==================== QUESTION SERVICES ====================
export const questionService = {
  /**
   * L·∫•y questions v·ªõi ph√¢n trang
   */
  async fetchPaginatedByLesson(lessonId, params = {}) {
    try {
      const response = await grammarAdminAPI.getQuestionsByLesson(lessonId, params);
      return response.data.data;
    } catch (error) {
      console.error('Fetch paginated questions error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi');
    }
  },

  /**
   * L·∫•y T·∫§T C·∫¢ questions theo lesson (kh√¥ng ph√¢n trang)
   */
  async fetchByLesson(lessonId) {
    try {
      const response = await grammarAdminAPI.getQuestionsByLesson(lessonId, { 
        page: 0, 
        size: 1000,
        sort: 'orderIndex,desc' // ‚úÖ Sort desc
      });
      
      if (response.data.data.content) {
        return response.data.data.content;
      }
      return response.data.data || [];
    } catch (error) {
      console.error('Fetch questions error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi');
    }
  },

  /**
   * L·∫•y orderIndex ti·∫øp theo cho question
   */
  async getNextOrderIndex(lessonId) {
    try {
      console.log(`üîç Fetching next order index for questions in lesson ${lessonId}...`);
      
      const response = await grammarAdminAPI.getNextQuestionOrderIndex(lessonId);
      const nextOrder = response.data.data.nextOrderIndex;
      
      console.log('‚úÖ Next question orderIndex:', nextOrder);
      return nextOrder;
    } catch (error) {
      console.error('‚ùå Get next order index error:', error);
      return 1;
    }
  },

  /**
   * T·∫°o question m·ªõi
   */
  async create(questionData) {
    try {
      const response = await grammarAdminAPI.createQuestion(questionData);
      toast.success('T·∫°o c√¢u h·ªèi th√†nh c√¥ng!');
      return response.data.data;
    } catch (error) {
      console.error('Create question error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi t·∫°o c√¢u h·ªèi');
    }
  },

  /**
   * T·∫°o nhi·ªÅu questions
   */
  async createBulk(lessonId, questions) {
    try {
      const response = await grammarAdminAPI.createQuestionsInBulk(lessonId, questions);
      toast.success(`T·∫°o ${questions.length} c√¢u h·ªèi th√†nh c√¥ng!`);
      return response.data.data;
    } catch (error) {
      console.error('Create bulk questions error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi t·∫°o c√¢u h·ªèi');
    }
  },

  /**
   * C·∫≠p nh·∫≠t question
   */
  async update(id, questionData) {
    try {
      const response = await grammarAdminAPI.updateQuestion(id, questionData);
      toast.success('C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng!');
      return response.data.data;
    } catch (error) {
      console.error('Update question error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi');
    }
  },

  /**
   * X√≥a question
   */
  async delete(id) {
    try {
      await grammarAdminAPI.deleteQuestion(id);
      toast.success('X√≥a c√¢u h·ªèi th√†nh c√¥ng!');
    } catch (error) {
      console.error('Delete question error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi x√≥a c√¢u h·ªèi');
    }
  },

  /**
   * X√≥a nhi·ªÅu questions
   */
  async bulkDelete(questionIds) {
    try {
      await grammarAdminAPI.bulkDeleteQuestions(questionIds);
      toast.success('ƒê√£ x√≥a ' + questionIds.length + ' c√¢u h·ªèi th√†nh c√¥ng!');
    } catch (error) {
      console.error('Delete bulk questions error:', error);
      throw new Error(error.response?.data?.message || 'L·ªói khi x√≥a nhi·ªÅu c√¢u h·ªèi');
    }
  },
};

// Export default
export default {
  topics: topicService,
  lessons: lessonService,
  questions: questionService,
};