package com.thanhnb.englishlearning.service;

import com.thanhnb.englishlearning.config.AIConfig;
import com.thanhnb.englishlearning.dto.grammar.GrammarLessonDTO;
import com.thanhnb.englishlearning.dto.grammar.GrammarQuestionDTO;
import com.thanhnb.englishlearning.dto.ParseResult;
import com.thanhnb.englishlearning.enums.LessonType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.JsonSyntaxException;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonDeserializer;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
@RequiredArgsConstructor
@Slf4j
public class GeminiPDFService {

    private final AIConfig aiConfig;
    
    // ‚úÖ Gson v·ªõi TypeAdapter cho LocalDateTime
    private final Gson gson = new GsonBuilder()
            .registerTypeAdapter(LocalDateTime.class, 
                (JsonSerializer<LocalDateTime>) (src, typeOfSrc, context) -> 
                    context.serialize(src.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME)))
            .registerTypeAdapter(LocalDateTime.class,
                (JsonDeserializer<LocalDateTime>) (json, typeOfT, context) ->
                    LocalDateTime.parse(json.getAsString(), DateTimeFormatter.ISO_LOCAL_DATE_TIME))
            .create();
    
    private final HttpClient httpClient = HttpClient.newBuilder()
            .connectTimeout(Duration.ofSeconds(30))
            .build();

    /**
     * Parse PDF th√†nh danh s√°ch lessons v·ªõi retry mechanism
     */
    public ParseResult parsePDF(MultipartFile file, Long topicId) throws Exception {
        log.info("üîç Starting PDF parsing for file: {} (size: {} KB)", 
                file.getOriginalFilename(), file.getSize() / 1024);

        // Validate file
        validateFile(file);

        // Convert to base64
        String base64Data = Base64.getEncoder().encodeToString(file.getBytes());
        String mimeType = file.getContentType();

        // Build prompt
        String prompt = buildPrompt();

        // Call Gemini API with retry
        String jsonResponse = callGeminiAPIWithRetry(prompt, base64Data, mimeType, 3);

        // Parse result
        ParseResult result = parseGeminiResponse(jsonResponse);

        // Post-processing
        result = postProcessResult(result, topicId);

        log.info("‚úÖ PDF parsing completed: {} lessons, {} total questions", 
                result.lessons.size(), 
                result.lessons.stream()
                    .filter(l -> l.getQuestions() != null)
                    .mapToInt(l -> l.getQuestions().size())
                    .sum());

        return result;
    }

    private void validateFile(MultipartFile file) {
        if (file.isEmpty()) {
            throw new IllegalArgumentException("File kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }

        String contentType = file.getContentType();
        if (contentType == null || 
            (!contentType.equals("application/pdf") && 
             !contentType.equals("application/vnd.openxmlformats-officedocument.wordprocessingml.document"))) {
            throw new IllegalArgumentException("Ch·ªâ h·ªó tr·ª£ file PDF v√† DOCX");
        }

        if (file.getSize() > 20 * 1024 * 1024) {
            throw new IllegalArgumentException("File kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 20MB");
        }
    }

    private String buildPrompt() {
        return """
                ü§ñ B·∫†N L√Ä CHUY√äN GIA PH√ÇN T√çCH T√ÄI LI·ªÜU H·ªåC TI·∫æNG ANH.

                üìã NHI·ªÜM V·ª§: ƒê·ªçc file v√† T·ª∞ ƒê·ªòNG CHIA TH√ÄNH C√ÅC B√ÄI H·ªåC (LESSONS) RI√äNG BI·ªÜT.

                ‚úÖ QUY T·∫ÆC PH√ÇN CHIA:

                1Ô∏è‚É£ M·ªñI CH·ª¶ ƒê·ªÄ NG·ªÆ PH√ÅP = 1 LESSON L√Ä THUY·∫æT (THEORY)
                   - V√≠ d·ª•: "HI·ªÜN T·∫†I ƒê∆†N ‚Äì PRESENT SIMPLE"
                   - Bao g·ªìm: Kh√°i ni·ªám, c·∫•u tr√∫c, c√¥ng th·ª©c, v√≠ d·ª•, d·∫•u hi·ªáu nh·∫≠n bi·∫øt
                   - Content: Markdown format v·ªõi \\n cho xu·ªëng d√≤ng

                2Ô∏è‚É£ M·ªñI PH·∫¶N B√ÄI T·∫¨P = 1 LESSON TH·ª∞C H√ÄNH (PRACTICE)
                   - V√≠ d·ª•: "B√ÄI T·∫¨P LUY·ªÜN T·∫¨P - PRESENT SIMPLE"
                   - K·∫øt h·ª£p "ƒê·ªÄ B√ÄI" + "ƒê√ÅP √ÅN" + "L·ªúI GI·∫¢I" th√†nh questions ho√†n ch·ªânh
                   - M·ªói c√¢u h·ªèi c·∫ßn: questionText + correctAnswer + explanation

                3Ô∏è‚É£ L·ªçc B·ªè:
                   - Header/footer l·∫∑p l·∫°i (Hotline, Website, Fanpage, Page number)
                   - Trang b√¨a, m·ª•c l·ª•c
                   - Qu·∫£ng c√°o, watermark

                üìù FORMAT JSON CHU·∫®N:

                {
                  "lessons": [
                    {
                      "title": "Hi·ªán t·∫°i ƒë∆°n - Present Simple",
                      "lessonType": "THEORY",
                      "content": "# I. KH√ÅI NI·ªÜM\\n\\nTh√¨ hi·ªán t·∫°i ƒë∆°n d√πng ƒë·ªÉ...\\n\\n## II. C·∫§U TR√öC\\n\\n**Kh·∫≥ng ƒë·ªãnh:** S + V(s/es)\\n**Ph·ªß ƒë·ªãnh:** S + don't/doesn't + V\\n**Nghi v·∫•n:** Do/Does + S + V?",
                      "orderIndex": 1,
                      "pointsReward": 10,
                      "estimatedDuration": 180,
                      "isActive": true
                    },
                    {
                      "title": "B√†i t·∫≠p - Hi·ªán t·∫°i ƒë∆°n",
                      "lessonType": "PRACTICE",
                      "content": "",
                      "orderIndex": 2,
                      "pointsReward": 15,
                      "estimatedDuration": 300,
                      "isActive": true,
                      "questions": [
                        {
                          "questionText": "My father always _____ Sunday dinner. (make)",
                          "questionType": "FILL_BLANK",
                          "correctAnswer": "makes",
                          "explanation": "D·∫•u hi·ªáu: 'always' (tr·∫°ng t·ª´ t·∫ßn su·∫•t) ‚Üí Th√¨ hi·ªán t·∫°i ƒë∆°n. Ch·ªß ng·ªØ 'father' (ng√¥i 3 s·ªë √≠t) ‚Üí ƒê·ªông t·ª´ th√™m 's'",
                          "points": 5,
                          "orderIndex": 1
                        }
                      ]
                    }
                  ]
                }

                üîë CHI TI·∫æT QUAN TR·ªåNG:

                **lessonType:** CH·ªà "THEORY" ho·∫∑c "PRACTICE"
                **questionType:** "FILL_BLANK", "MULTIPLE_CHOICE", "TRANSLATE", "VERB_FORM", "TRUE_FALSE"
                **pointsReward:** THEORY: 10, PRACTICE: 15
                **estimatedDuration:** THEORY: 180, PRACTICE: 300
                **correctAnswer:** Nhi·ªÅu ƒë√°p √°n ƒë√∫ng: NgƒÉn c√°ch b·ªüi "|"

                ‚ö†Ô∏è CH·ªà TR·∫¢ V·ªÄ JSON H·ª¢P L·ªÜ, KH√îNG TEXT TH·ª™A, KH√îNG MARKDOWN WRAPPER!
                """;
    }

    private String callGeminiAPIWithRetry(String prompt, String base64Data, String mimeType, int maxRetries) throws Exception {
        Exception lastException = null;

        for (int attempt = 1; attempt <= maxRetries; attempt++) {
            try {
                log.info("üåê Calling Gemini API (attempt {}/{})", attempt, maxRetries);
                return callGeminiAPI(prompt, base64Data, mimeType);
            } catch (Exception e) {
                lastException = e;
                log.warn("‚ö†Ô∏è Gemini API call failed (attempt {}/{}): {}", attempt, maxRetries, e.getMessage());
                
                if (attempt < maxRetries) {
                    long waitTime = (long) Math.pow(2, attempt) * 6000;
                    log.info("‚è≥ Retrying after {}ms...", waitTime);
                    Thread.sleep(waitTime);
                }
            }
        }

        throw new Exception("Gemini API failed after " + maxRetries + " attempts", lastException);
    }

    private String callGeminiAPI(String prompt, String base64Data, String mimeType) throws Exception {
        String url = "https://generativelanguage.googleapis.com/"
            + aiConfig.getGemini().getVersion()
            + "/models/" 
            + aiConfig.getGemini().getModel() 
            + ":generateContent?key=" 
            + aiConfig.getGemini().getApiKey();

        Map<String, Object> inlineData = new HashMap<>();
        inlineData.put("mime_type", mimeType);
        inlineData.put("data", base64Data);

        Map<String, Object> filePart = new HashMap<>();
        filePart.put("inline_data", inlineData);

        Map<String, Object> textPart = new HashMap<>();
        textPart.put("text", prompt);

        Map<String, Object> content = new HashMap<>();
        content.put("parts", Arrays.asList(filePart, textPart));

        Map<String, Object> generationConfig = new HashMap<>();
        generationConfig.put("temperature", aiConfig.getGemini().getTemperature());
        generationConfig.put("maxOutputTokens", aiConfig.getGemini().getMaxTokens());
        generationConfig.put("topP", 0.95);
        generationConfig.put("topK", 40);

        Map<String, Object> requestBody = new HashMap<>();
        requestBody.put("contents", Collections.singletonList(content));
        requestBody.put("generationConfig", generationConfig);

        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create(url))
                .header("Content-Type", "application/json")
                .timeout(Duration.ofSeconds(60))
                .POST(HttpRequest.BodyPublishers.ofString(gson.toJson(requestBody)))
                .build();

        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());

        if (response.statusCode() != 200) {
            log.error("‚ùå Gemini API error: {}", response.body());
            throw new Exception("Gemini API error (status " + response.statusCode() + "): " + response.body());
        }

        return extractJSONFromResponse(response.body());
    }

    private String extractJSONFromResponse(String geminiResponse) throws Exception {
        try {
            JsonObject jsonResponse = gson.fromJson(geminiResponse, JsonObject.class);

            String text = jsonResponse
                    .getAsJsonArray("candidates")
                    .get(0).getAsJsonObject()
                    .getAsJsonObject("content")
                    .getAsJsonArray("parts")
                    .get(0).getAsJsonObject()
                    .get("text").getAsString();

            text = text.trim();
            if (text.startsWith("```json")) {
                text = text.substring(7);
            } else if (text.startsWith("```")) {
                text = text.substring(3);
            }
            if (text.endsWith("```")) {
                text = text.substring(0, text.length() - 3);
            }

            return text.trim();
        } catch (Exception e) {
            log.error("‚ùå Failed to extract JSON from Gemini response: {}", e.getMessage());
            throw new Exception("Invalid response format from Gemini API", e);
        }
    }

    private ParseResult parseGeminiResponse(String jsonResponse) throws Exception {
        try {
            ParseResult result = gson.fromJson(jsonResponse, ParseResult.class);

            if (result == null || result.lessons == null || result.lessons.isEmpty()) {
                throw new Exception("Gemini kh√¥ng tr·∫£ v·ªÅ lessons n√†o. Ki·ªÉm tra l·∫°i format PDF");
            }

            log.info("üìä Parsed {} lessons from Gemini response", result.lessons.size());
            return result;

        } catch (JsonSyntaxException e) {
            log.error("‚ùå Invalid JSON from Gemini: {}", jsonResponse);
            throw new Exception("Gemini tr·∫£ v·ªÅ JSON kh√¥ng h·ª£p l·ªá", e);
        }
    }

    private ParseResult postProcessResult(ParseResult result, Long topicId) {
        int currentOrderIndex = 1;

        for (GrammarLessonDTO lesson : result.lessons) {
            lesson.setTopicId(topicId);

            if (lesson.getOrderIndex() == null || lesson.getOrderIndex() == 0) {
                lesson.setOrderIndex(currentOrderIndex++);
            }

            if (lesson.getPointsReward() == null || lesson.getPointsReward() == 0) {
                lesson.setPointsReward(lesson.getLessonType() == LessonType.THEORY ? 10 : 15);
            }

            if (lesson.getEstimatedDuration() == null || lesson.getEstimatedDuration() == 0) {
                lesson.setEstimatedDuration(lesson.getLessonType() == LessonType.THEORY ? 180 : 300);
            }

            if (lesson.getIsActive() == null) {
                lesson.setIsActive(true);
            }

            if (lesson.getQuestions() != null && !lesson.getQuestions().isEmpty()) {
                int questionOrder = 1;
                for (GrammarQuestionDTO question : lesson.getQuestions()) {
                    if (question.getOrderIndex() == null || question.getOrderIndex() == 0) {
                        question.setOrderIndex(questionOrder++);
                    }
                    if (question.getPoints() == null || question.getPoints() == 0) {
                        question.setPoints(5);
                    }
                }
            }

            log.debug("‚úÖ Processed lesson: {} (type: {}, {} questions)", 
                    lesson.getTitle(), 
                    lesson.getLessonType(), 
                    lesson.getQuestions() != null ? lesson.getQuestions().size() : 0);
        }

        return result;
    }
}