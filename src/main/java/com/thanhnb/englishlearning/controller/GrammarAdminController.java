package com.thanhnb.englishlearning.controller;

import com.thanhnb.englishlearning.dto.grammar.*;
import com.thanhnb.englishlearning.enums.QuestionType;
import com.thanhnb.englishlearning.dto.CustomApiResponse;
import com.thanhnb.englishlearning.service.grammar.GrammarAdminService;

import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;

@RestController
@RequestMapping("/api/admin/grammar")
@RequiredArgsConstructor
@PreAuthorize("hasRole('ADMIN')")
@Tag(name = "Grammar Admin", description = "API qu·∫£n l√Ω ng·ªØ ph√°p (d√†nh cho ADMIN)")
@SecurityRequirement(name = "bearerAuth")
public class GrammarAdminController {
    private final GrammarAdminService grammarAdminService;

    @GetMapping("/endpoints")
    @Operation(summary = "L·∫•y danh s√°ch c√°c endpoint qu·∫£n tr·ªã", description = "Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ c√°c endpoint API qu·∫£n tr·ªã ng·ªØ ph√°p c√≥ s·∫µn")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "L·∫•y danh s√°ch endpoint th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá")
    })
    public ResponseEntity<CustomApiResponse<Object>> getAdminEndpoints() {
        var endpoints = Arrays.asList(
            Map.of("method", "GET", "url", "/api/admin/grammar/topics", "description", "üìö Qu·∫£n l√Ω topics"),
            Map.of("method", "POST", "url", "/api/admin/grammar/topics", "description", "‚ûï T·∫°o topic m·ªõi"),
            Map.of("method", "PUT", "url", "/api/admin/grammar/topics/{id}", "description", "‚úèÔ∏è C·∫≠p nh·∫≠t topic"),
            Map.of("method", "DELETE", "url", "/api/admin/grammar/topics/{id}", "description", "üóëÔ∏è X√≥a topic"),
            Map.of("method", "GET", "url", "/api/admin/grammar/topics/{topicId}/lessons", "description", "üìù Qu·∫£n l√Ω lessons"),
            Map.of("method", "POST", "url", "/api/admin/grammar/lessons", "description", "‚ûï T·∫°o lesson m·ªõi"),
            Map.of("method", "PUT", "url", "/api/admin/grammar/lessons/{id}", "description", "‚úèÔ∏è C·∫≠p nh·∫≠t lesson"),
            Map.of("method", "DELETE", "url", "/api/admin/grammar/lessons/{id}", "description", "üóëÔ∏è X√≥a lesson"),
            Map.of("method", "GET", "url", "/api/admin/grammar/lessons/{lessonId}/questions", "description", "‚ùì Qu·∫£n l√Ω questions"),
            Map.of("method", "POST", "url", "/api/admin/grammar/questions", "description", "‚ûï T·∫°o question m·ªõi"),
            Map.of("method", "PUT", "url", "/api/admin/grammar/questions/{id}", "description", "‚úèÔ∏è C·∫≠p nh·∫≠t question"),
            Map.of("method", "DELETE", "url", "/api/admin/grammar/questions/{id}", "description", "üóëÔ∏è X√≥a question")
        );

        return ResponseEntity.ok(CustomApiResponse.success(Map.of(
            "controller", "GrammarAdminController - Content Management",
            "baseUrl", "http://localhost:8980/api/admin/grammar",
            "totalEndpoints", endpoints.size(),
            "endpoints", endpoints,
            "note", "‚ö†Ô∏è T·∫•t c·∫£ endpoints y√™u c·∫ßu ADMIN role"
        ), "Danh s√°ch Grammar Admin API endpoints"));
    }

    // ===== TOPIC MANAGEMENT =====

    @GetMapping("/topics")
    @Operation(summary = "L·∫•y t·∫•t c·∫£ c√°c ch·ªß ƒë·ªÅ ng·ªØ ph√°p", description = "Tr·∫£ v·ªÅ danh s√°ch t·∫•t c·∫£ c√°c ch·ªß ƒë·ªÅ ng·ªØ ph√°p ƒë·ªÉ qu·∫£n l√Ω admin")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "L·∫•y danh s√°ch ch·ªß ƒë·ªÅ th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá")
    })
    public ResponseEntity<CustomApiResponse<List<GrammarTopicDTO>>> getAllTopics() {
        try {
            List<GrammarTopicDTO> topics = grammarAdminService.getAllTopics();
            return ResponseEntity.ok(CustomApiResponse.success(topics, 
                "L·∫•y danh s√°ch topics th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi l·∫•y danh s√°ch topics: " + e.getMessage()));
        }
    }

    @PostMapping("/topics")
    @Operation(summary = "T·∫°o ch·ªß ƒë·ªÅ ng·ªØ ph√°p m·ªõi", description = "T·∫°o m·ªôt ch·ªß ƒë·ªÅ ng·ªØ ph√°p m·ªõi v·ªõi c√°c th√¥ng tin ƒë√£ cung c·∫•p")
    @ApiResponses({
        @ApiResponse(responseCode = "201", description = "T·∫°o ch·ªß ƒë·ªÅ th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá")
    })
    public ResponseEntity<CustomApiResponse<GrammarTopicDTO>> createTopic(@Valid @RequestBody GrammarTopicDTO dto) {
        try {
            GrammarTopicDTO created = grammarAdminService.createTopic(dto);
            return ResponseEntity.status(HttpStatus.CREATED)
                .body(CustomApiResponse.created(created, "T·∫°o topic th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi t·∫°o topic: " + e.getMessage()));
        }
    }

    @PutMapping("/topics/{id}")
    @Operation(summary = "C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ ng·ªØ ph√°p", description = "C·∫≠p nh·∫≠t m·ªôt ch·ªß ƒë·ªÅ ng·ªØ ph√°p hi·ªán c√≥ theo ID")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t ch·ªß ƒë·ªÅ th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ")
    })
    public ResponseEntity<CustomApiResponse<GrammarTopicDTO>> updateTopic(
            @Parameter(description = "ID c·ªßa ch·ªß ƒë·ªÅ c·∫ßn c·∫≠p nh·∫≠t") @PathVariable Long id,
            @Valid @RequestBody GrammarTopicDTO dto) {
        try {
            GrammarTopicDTO updated = grammarAdminService.updateTopic(id, dto);
            return ResponseEntity.ok(CustomApiResponse.success(updated, "C·∫≠p nh·∫≠t topic th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi c·∫≠p nh·∫≠t topic: " + e.getMessage()));
        }
    }

    @DeleteMapping("/topics/{id}")
    @Operation(summary = "X√≥a ch·ªß ƒë·ªÅ ng·ªØ ph√°p", description = "X√≥a m·ªôt ch·ªß ƒë·ªÅ ng·ªØ ph√°p theo ID")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "X√≥a ch·ªß ƒë·ªÅ th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ ho·∫∑c x√≥a kh√¥ng th√†nh c√¥ng")
    })
    public ResponseEntity<CustomApiResponse<String>> deleteTopic(
            @Parameter(description = "ID c·ªßa ch·ªß ƒë·ªÅ c·∫ßn x√≥a") @PathVariable Long id) {
        try {
            grammarAdminService.deleteTopic(id);
            return ResponseEntity.ok(CustomApiResponse.success("X√≥a topic th√†nh c√¥ng", 
                "X√≥a topic th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi x√≥a topic: " + e.getMessage()));
        }
    }

    // ===== LESSON MANAGEMENT =====

    @GetMapping("/topics/{topicId}/lessons")
    @Operation(summary = "L·∫•y danh s√°ch b√†i h·ªçc theo ch·ªß ƒë·ªÅ", description = "Tr·∫£ v·ªÅ t·∫•t c·∫£ b√†i h·ªçc thu·ªôc v·ªÅ m·ªôt ch·ªß ƒë·ªÅ c·ª• th·ªÉ")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "L·∫•y danh s√°ch b√†i h·ªçc th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - kh√¥ng t√¨m th·∫•y ch·ªß ƒë·ªÅ")
    })
    public ResponseEntity<CustomApiResponse<List<GrammarLessonDTO>>> getLessonsByTopic(
            @Parameter(description = "ID c·ªßa ch·ªß ƒë·ªÅ") @PathVariable Long topicId) {
        try {
            List<GrammarLessonDTO> lessons = grammarAdminService.getLessonsByTopic(topicId);
            return ResponseEntity.ok(CustomApiResponse.success(lessons,
                "L·∫•y danh s√°ch b√†i h·ªçc th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi l·∫•y danh s√°ch b√†i h·ªçc: " + e.getMessage()));
        }
    }

    @PostMapping("/lessons")
    @Operation(summary = "T·∫°o b√†i h·ªçc ng·ªØ ph√°p m·ªõi", description = "T·∫°o m·ªôt b√†i h·ªçc ng·ªØ ph√°p m·ªõi v·ªõi c√°c th√¥ng tin ƒë√£ cung c·∫•p")
    @ApiResponses({
        @ApiResponse(responseCode = "201", description = "T·∫°o b√†i h·ªçc th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - d·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá")
    })
    public ResponseEntity<CustomApiResponse<GrammarLessonDTO>> createLesson(@Valid @RequestBody GrammarLessonDTO dto) {
        try {
            GrammarLessonDTO created = grammarAdminService.createLesson(dto);
            return ResponseEntity.status(HttpStatus.CREATED)
                .body(CustomApiResponse.created(created, "T·∫°o lesson th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi t·∫°o lesson: " + e.getMessage()));
        }
    }

    @PutMapping("/lessons/{id}")
    @Operation(summary = "C·∫≠p nh·∫≠t b√†i h·ªçc ng·ªØ ph√°p", description = "C·∫≠p nh·∫≠t m·ªôt b√†i h·ªçc ng·ªØ ph√°p hi·ªán c√≥ theo ID")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t b√†i h·ªçc th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - d·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t√¨m th·∫•y b√†i h·ªçc")
    })
    public ResponseEntity<CustomApiResponse<GrammarLessonDTO>> updateLesson(
            @Parameter(description = "ID c·ªßa b√†i h·ªçc c·∫ßn c·∫≠p nh·∫≠t") @PathVariable Long id,
            @Valid @RequestBody GrammarLessonDTO dto) {
        try {
            GrammarLessonDTO updated = grammarAdminService.updateLesson(id, dto);
            return ResponseEntity.ok(CustomApiResponse.success(updated, "C·∫≠p nh·∫≠t b√†i h·ªçc th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi c·∫≠p nh·∫≠t b√†i h·ªçc: " + e.getMessage()));
        }
    }

    @DeleteMapping("/lessons/{id}")
    @Operation(summary = "X√≥a b√†i h·ªçc ng·ªØ ph√°p", description = "X√≥a m·ªôt b√†i h·ªçc ng·ªØ ph√°p theo ID")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "X√≥a b√†i h·ªçc th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - kh√¥ng t√¨m th·∫•y b√†i h·ªçc ho·∫∑c x√≥a th·∫•t b·∫°i")
    })
    public ResponseEntity<CustomApiResponse<String>> deleteLesson(
            @Parameter(description = "ID c·ªßa b√†i h·ªçc c·∫ßn x√≥a") @PathVariable Long id) {
        try {
            grammarAdminService.deleteLesson(id);
            return ResponseEntity.ok(CustomApiResponse.success("X√≥a b√†i h·ªçc th√†nh c√¥ng", 
                "X√≥a b√†i h·ªçc th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi x√≥a b√†i h·ªçc: " + e.getMessage()));
        }
    }

    // ===== QUESTION MANAGEMENT =====

    @GetMapping("/lessons/{lessonId}/questions")
    @Operation(summary = "L·∫•y c√¢u h·ªèi theo b√†i h·ªçc", description = "L·∫•y t·∫•t c·∫£ c√¢u h·ªèi thu·ªôc v·ªÅ m·ªôt b√†i h·ªçc c·ª• th·ªÉ")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "L·∫•y c√¢u h·ªèi th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - kh√¥ng t√¨m th·∫•y b√†i h·ªçc")
    })
    public ResponseEntity<CustomApiResponse<List<GrammarQuestionDTO>>> getQuestionsByLesson(
            @Parameter(description = "ID c·ªßa b√†i h·ªçc") @PathVariable Long lessonId) {
        try {
            List<GrammarQuestionDTO> questions = grammarAdminService.getQuestionsByLesson(lessonId);
            return ResponseEntity.ok(CustomApiResponse.success(questions,
                "L·∫•y danh s√°ch c√¢u h·ªèi th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi l·∫•y danh s√°ch c√¢u h·ªèi: " + e.getMessage()));
        }
    }

    @PostMapping("/questions")
    @Operation(summary = "T·∫°o c√¢u h·ªèi ng·ªØ ph√°p m·ªõi", description = "T·∫°o m·ªôt c√¢u h·ªèi ng·ªØ ph√°p m·ªõi v·ªõi x√°c th·ª±c d·ª±a tr√™n lo·∫°i c√¢u h·ªèi")
    @ApiResponses({
        @ApiResponse(responseCode = "201", description = "T·∫°o c√¢u h·ªèi th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c x√°c th·ª±c kh√¥ng th√†nh c√¥ng")
    })
    public ResponseEntity<CustomApiResponse<GrammarQuestionDTO>> createQuestion(@Valid @RequestBody GrammarQuestionDTO dto) {

        // Ki·ªÉm tra s·ªë l∆∞·ª£ng l·ª±a ch·ªçn cho c√¢u tr·∫Øc nghi·ªám
        if (dto.getQuestionType() == QuestionType.MULTIPLE_CHOICE && 
            (dto.getOptions() == null || dto.getOptions().size() < 2)) {
            throw new RuntimeException("C√¢u h·ªèi tr·∫Øc nghi·ªám ph·∫£i c√≥ √≠t nh·∫•t 2 l·ª±a ch·ªçn");
        }
        // Ki·ªÉm tra correctAnswer cho FILL_BLANK v√† TRANSLATION
        if (dto.getQuestionType() == QuestionType.FILL_BLANK || 
            dto.getQuestionType() == QuestionType.TRANSLATION_VI_EN || 
            dto.getQuestionType() == QuestionType.TRANSLATION_EN_VI) {
            if (dto.getCorrectAnswer() == null || dto.getCorrectAnswer().trim().isEmpty()) {
                throw new RuntimeException("ƒê√°p √°n ƒë√∫ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            }
            String[] correctAnswers = dto.getCorrectAnswer().split("\\|");
            if (Arrays.stream(correctAnswers).anyMatch(String::isBlank)) {
                throw new RuntimeException("ƒê√°p √°n ƒë√∫ng kh√¥ng ƒë∆∞·ª£c ch·ª©a ph·∫ßn t·ª≠ tr·ªëng");
            }
        }
        
        try {
            GrammarQuestionDTO created = grammarAdminService.createQuestion(dto);
            return ResponseEntity.status(HttpStatus.CREATED)
                .body(CustomApiResponse.created(created, "T·∫°o question th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi t·∫°o question: " + e.getMessage()));
        }
    }

    @PutMapping("/questions/{id}")
    @Operation(summary = "C·∫≠p nh·∫≠t c√¢u h·ªèi ng·ªØ ph√°p", description = "C·∫≠p nh·∫≠t m·ªôt c√¢u h·ªèi ng·ªØ ph√°p hi·ªán c√≥ theo ID")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t√¨m th·∫•y c√¢u h·ªèi")
    })
    public ResponseEntity<CustomApiResponse<GrammarQuestionDTO>> updateQuestion(
            @Parameter(description = "ID c·ªßa c√¢u h·ªèi c·∫ßn c·∫≠p nh·∫≠t") @PathVariable Long id,
            @Valid @RequestBody GrammarQuestionDTO dto) {
        try {
            GrammarQuestionDTO updated = grammarAdminService.updateQuestion(id, dto);
            return ResponseEntity.ok(CustomApiResponse.success(updated, "C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi c·∫≠p nh·∫≠t c√¢u h·ªèi: " + e.getMessage()));
        }
    }

    @DeleteMapping("/questions/{id}")
    @Operation(summary = "X√≥a c√¢u h·ªèi ng·ªØ ph√°p", description = "X√≥a m·ªôt c√¢u h·ªèi ng·ªØ ph√°p theo ID")
    @ApiResponses({
        @ApiResponse(responseCode = "200", description = "X√≥a c√¢u h·ªèi th√†nh c√¥ng"),
        @ApiResponse(responseCode = "400", description = "Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá - kh√¥ng t√¨m th·∫•y c√¢u h·ªèi ho·∫∑c x√≥a kh√¥ng th√†nh c√¥ng")
    })
    public ResponseEntity<CustomApiResponse<String>> deleteQuestion(
            @Parameter(description = "ID c·ªßa c√¢u h·ªèi c·∫ßn x√≥a") @PathVariable Long id) {
        try {
            grammarAdminService.deleteQuestion(id);
            return ResponseEntity.ok(CustomApiResponse.success("X√≥a c√¢u h·ªèi th√†nh c√¥ng", 
                "X√≥a c√¢u h·ªèi th√†nh c√¥ng"));
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                .body(CustomApiResponse.badRequest("L·ªói khi x√≥a c√¢u h·ªèi: " + e.getMessage()));
        }
    }
}