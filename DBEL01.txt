-- Enum types
CREATE TYPE user_role AS ENUM ('ADMIN', 'USER');
CREATE TYPE english_level AS ENUM ('BEGINNER', 'INTERMEDIATE', 'ADVANCED');
CREATE TYPE lesson_type AS ENUM ('THEORY', 'EXERCISE');
CREATE TYPE question_type AS ENUM ('MULTIPLE_CHOICE', 'FILL_BLANK', 'SENTENCE_BUILDING');
CREATE TYPE mastery_level AS ENUM ('NEW', 'LEARNING', 'FAMILIAR', 'MASTERED');

-- Users table
CREATE TABLE users (
    id BIGSERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    full_name VARCHAR(100),
    role user_role DEFAULT 'USER',
    level_english english_level DEFAULT 'BEGINNER',
    total_points INT DEFAULT 0,
    streak_days INT DEFAULT 0,
    last_login_date DATE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE
);

-- Grammar tables
CREATE TABLE grammar_topics (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    level_required english_level DEFAULT 'BEGINNER',
    order_index INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE grammar_lessons (
    id BIGSERIAL PRIMARY KEY,
    topic_id BIGINT NOT NULL,
    title VARCHAR(200) NOT NULL,
    lesson_type lesson_type NOT NULL,
    content TEXT,
    order_index INT NOT NULL,
    points_required INT DEFAULT 0,
    points_reward INT DEFAULT 10,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (topic_id) REFERENCES grammar_topics(id) ON DELETE CASCADE
);

CREATE TABLE grammar_questions (
    id BIGSERIAL PRIMARY KEY,
    lesson_id BIGINT NOT NULL,
    question_text TEXT NOT NULL,
    question_type question_type NOT NULL,
    correct_answer TEXT NOT NULL,
    explanation TEXT,
    points INT DEFAULT 5,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (lesson_id) REFERENCES grammar_lessons(id) ON DELETE CASCADE
);

CREATE TABLE grammar_question_options (
    id BIGSERIAL PRIMARY KEY,
    question_id BIGINT NOT NULL,
    option_text VARCHAR(500) NOT NULL,
    is_correct BOOLEAN DEFAULT FALSE,
    order_index INT NOT NULL,
    FOREIGN KEY (question_id) REFERENCES grammar_questions(id) ON DELETE CASCADE
);

-- Vocabulary tables
CREATE TABLE vocabulary_topics (
    id BIGSERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    level_required english_level DEFAULT 'BEGINNER',
    order_index INT NOT NULL,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE vocabulary_words (
    id BIGSERIAL PRIMARY KEY,
    topic_id BIGINT NOT NULL,
    word VARCHAR(200) NOT NULL,
    pronunciation VARCHAR(300),
    meaning TEXT NOT NULL,
    part_of_speech VARCHAR(50),
    example_sentence TEXT,
    example_translation TEXT,
    audio_url VARCHAR(500),
    image_url VARCHAR(500),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (topic_id) REFERENCES vocabulary_topics(id) ON DELETE CASCADE
);

-- Listening tables
CREATE TABLE listening_lessons (
    id BIGSERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    audio_url VARCHAR(500) NOT NULL,
    transcript TEXT NOT NULL,
    level_required english_level DEFAULT 'BEGINNER',
    duration_seconds INT,
    points_reward INT DEFAULT 20,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE listening_questions (
    id BIGSERIAL PRIMARY KEY,
    lesson_id BIGINT NOT NULL,
    question_text TEXT NOT NULL,
    correct_answer VARCHAR(200) NOT NULL,
    start_time_seconds INT,
    end_time_seconds INT,
    points INT DEFAULT 5,
    FOREIGN KEY (lesson_id) REFERENCES listening_lessons(id) ON DELETE CASCADE
);

-- Reading tables
CREATE TABLE reading_lessons (
    id BIGSERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    content TEXT NOT NULL,
    content_translation TEXT,
    level_required english_level DEFAULT 'BEGINNER',
    exercise_type VARCHAR(50) NOT NULL,
    points_reward INT DEFAULT 25,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE reading_questions (
    id BIGSERIAL PRIMARY KEY,
    lesson_id BIGINT NOT NULL,
    question_text TEXT NOT NULL,
    correct_answer TEXT NOT NULL,
    question_type VARCHAR(50) NOT NULL,
    points INT DEFAULT 5,
    FOREIGN KEY (lesson_id) REFERENCES reading_lessons(id) ON DELETE CASCADE
);

-- Speaking tables
CREATE TABLE speaking_topics (
    id BIGSERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    level_required english_level DEFAULT 'BEGINNER',
    scenario TEXT NOT NULL,
    suggested_vocabulary JSON,
    points_reward INT DEFAULT 30,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_speaking_submissions (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    topic_id BIGINT NOT NULL,
    audio_url VARCHAR(500), -- Link file audio nộp
    ai_score INT DEFAULT 0, -- Điểm từ AI
    feedback TEXT, -- Phản hồi từ AI
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (topic_id) REFERENCES speaking_topics(id) ON DELETE CASCADE,
    UNIQUE (user_id, topic_id)
);

CREATE TABLE user_speaking_progress (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    topic_id BIGINT NOT NULL,
    is_completed BOOLEAN DEFAULT FALSE,
    score INT DEFAULT 0,
    attempts INT DEFAULT 0,
    completed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (topic_id) REFERENCES speaking_topics(id) ON DELETE CASCADE,
    UNIQUE (user_id, topic_id)
);

-- Writing tables
CREATE TABLE writing_exercises (
    id BIGSERIAL PRIMARY KEY,
    title VARCHAR(200) NOT NULL,
    prompt TEXT NOT NULL,
    example_answer TEXT,
    level_required english_level DEFAULT 'BEGINNER',
    exercise_type VARCHAR(50) NOT NULL,
    min_words INT DEFAULT 50,
    max_words INT DEFAULT 200,
    points_reward INT DEFAULT 35,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE user_writing_submissions (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    exercise_id BIGINT NOT NULL,
    text_content TEXT NOT NULL, -- Nội dung bài viết nộp
    ai_score INT DEFAULT 0, -- Điểm từ AI
    feedback TEXT, -- Phản hồi từ AI
    word_count INT NOT NULL, -- Số từ của bài viết
    submitted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (exercise_id) REFERENCES writing_exercises(id) ON DELETE CASCADE,
    UNIQUE (user_id, exercise_id)
);

CREATE TABLE user_writing_progress (
    id BIGSERIAL PRIMARY KEY,
    user_id BIGINT NOT NULL,
    exercise_id BIGINT NOT NULL,
    is_completed BOOLEAN DEFAULT FALSE,
    score INT DEFAULT 0,
    attempts INT DEFAULT 0,
    completed_at TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (exercise_id) REFERENCES writing_exercises(id) ON DELETE CASCADE,
    UNIQUE (user_id, exercise_id)
);

-- Trigger function for updating updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers for updated_at
CREATE TRIGGER update_users_updated_at 
    BEFORE UPDATE ON users 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_grammar_progress_updated_at 
    BEFORE UPDATE ON user_grammar_progress 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_vocabulary_progress_updated_at 
    BEFORE UPDATE ON user_vocabulary_progress 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_speaking_progress_updated_at 
    BEFORE UPDATE ON user_speaking_progress 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_writing_progress_updated_at 
    BEFORE UPDATE ON user_writing_progress 
    FOR EACH ROW 
    EXECUTE FUNCTION update_updated_at_column();